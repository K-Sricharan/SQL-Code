--CREATE TABLE EmployeeDemographics
--(EmployeeID int,
--Firstname varchar(50),
--Lastname varchar(50),
--Age int, 
--Gender varchar(50)

--)

--Create table Employeesalary
--(EmployeeID int,
--JobTitle varchar(50),
--Salary int
--)

--insert into EmployeeDemographics values 
--(1001, 'Jim', 'Halpert', 30, 'Male'),
--(1002, 'Pam', 'Beasley', 30, 'Female'),
--(1003, 'Dwight', 'Schrute', 29, 'Male'),
--(1004, 'Angela', 'Martin', 31, 'Female'),
--(1005, 'Toby', 'Flenderson', 32, 'Male'),
--(1006, 'Michael', 'Scott', 35, 'Male'),
--(1007, 'Meredith', 'Palmer', 32, 'Female'),
--(1008, 'Stanley', 'Hudson', 38, 'Male'),
--(1009, 'Kevin', 'Malone', 31, 'Male')

--Insert Into EmployeeSalary VALUES
--(1001, 'Salesman', 45000),
--(1002, 'Receptionist', 36000),
--(1003, 'Salesman', 63000),
--(1004, 'Accountant', 47000),
--(1005, 'HR', 50000),
--(1006, 'Regional Manager', 65000),
--(1007, 'Supplier Relations', 41000),
--(1008, 'Salesman', 48000),
--(1009, 'Accountant', 42000)




--Select Count(Gender) As Gendercount
--from SQL.dbo.EmployeeDemographics

--use SQL
--Use ablove command to use the specific database

--Select * from EmployeeDemographics

--Where Statement 
--=,<>,<,>,AND,OR,LIKE,NULL,NOT NULL, IN

--Select * from EmployeeDemographics 
--Where Lastname LIKE '%y'


/*
GROUP BY, ORDER BY
*/

--Select Gender, Count(Gender) 
--From EmployeeDemographics 
--Group by Gender

--Select Gender, Age, Count(Gender)  
--From EmployeeDemographics 
--Group by Gender,Age

--Select Gender, Age, Count(Gender)  
--From EmployeeDemographics 
--Where Age>30 
--Group by Gender,Age

--Select Gender, Count(Gender)  AS Countgender
--From EmployeeDemographics 
--Where Age>30 
--Group by Gender
--Order by Countgender DESC 

--Select * From EmployeeDemographics order by 1 DESC

--Select * from EmployeeDemographics
--Select * from Employeesalary 

--select * from EmployeeDemographics FULL OUTER JOIN Employeesalary ON EmployeeDemographics.EmployeeID=Employeesalary.EmployeeID

/* 
Unions
*/

--Use SQL

--Insert into EmployeeDemographics VALUES
--(1011, 'Ryan', 'Howard', 26, 'Male'),
--(NULL, 'Holly', 'Flax', NULL, NULL),
--(1013, 'Darryl', 'Philbin', NULL, 'Male')

--Create Table WareHouseEmployeeDemographics 
--(EmployeeID int, 
--FirstName varchar(50), 
--LastName varchar(50), 
--Age int, 
--Gender varchar(50)
--)

----Table 3 Insert:
--Insert into WareHouseEmployeeDemographics VALUES
--(1013, 'Darryl', 'Philbin', NULL, 'Male'),
--(1050, 'Roy', 'Anderson', 31, 'Male'),
--(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),
--(1052, 'Val', 'Johnson', 31, 'Female')

--Select * From EmployeeDemographics
--Union All
--Select * from WareHouseEmployeeDemographics
--Order by EmployeeID 

/*
Case Satement
*/

--Select Firstname,Lastname,Age,
--CASE
--    When Age > 30 THEN 'OLD'
--	When Age BETWEEN 27 AND 30 THEN 'Young'
--	ELSE 'Baby'
--END
--From EmployeeDemographics 
--Where Age Is not null
--order by Age 

--Use SQL

--Select Firstname, Lastname, JobTitle, Salary,
--Case 
--	WHEN JobTitle = 'Salesman' THEN Salary + (Salary * .10)
--	WHEN JobTitle = 'Accountant' THEN Salary + (Salary * .05)
--	WHEN JobTitle = 'HR' THEN Salary + (Salary * .000001)
--	ELSE Salary * (Salary * .03)
--END AS Increment
--From EmployeeDemographics 
--JOIN
--Employeesalary
--	ON EmployeeDemographics.EmployeeID = Employeesalary.EmployeeID 


/*
Having Clause
*/


--Select JobTitle, COUNT(JobTitle)
--FROM EmployeeDemographics
--JOIN Employeesalary
--	ON EmployeeDemographics.EmployeeID = Employeesalary.EmployeeID
--Group BY JobTitle
--HAVING COUNT(JobTitle) > 1



--Select JobTitle, AVG(Salary)
--FROM EmployeeDemographics
--JOIN Employeesalary
--	ON EmployeeDemographics.EmployeeID = Employeesalary.EmployeeID
--Group BY JobTitle
--HAVING AVG(Salary) > 45000
--ORDER BY AVG(Salary)

/*
Update AND Delete Query
*/

--USE SQL

--Select * From EmployeeDemographics
--Update EmployeeDemographics SET EmployeeID = 1012
--Where Firstname = 'Holly' and Lastname = 'Flax'

--Delete From EmployeeDemographics Where EmployeeID = 10005


/*
Aliasing
*/

--Select  Firstname + ' ' + Lastname AS FULLNAME
--From EmployeeDemographics

--Select AVG(Age) AS AVGAGE
--From EmployeeDemographics

--SELECT Demo. EmployeeID, Demo. FirstName, Demo. FirstName,
--   Sal. JobTitle, Ware.Age
-- FROM EmployeeDemographics Demo
-- LEFT JOIN EmployeeSalary Sal
--    ON Demo. EmployeeID = Sal. EmployeeID
-- LEFT JOIN WareHouseEmployeeDemographics Ware
--    ON Demo. EmployeeID = Ware. EmployeeID


/*
Partition By
*/

--Select * From SQL..EmployeeDemographics

--SELECT FirstName, LastName, Gender, Salary,
--COUNT(Gender) OVER (PARTITION BY Gender) as TotalGender
--FROM EmployeeDemographics dem
--JOIN EmployeeSalary sal
--ON dem.EmployeeID = sal.EmployeeID

--SELECT Gender, COUNT(Gender)
--FROM EmployeeDemographics dem
--JOIN EmployeeSalary sal
--ON dem.EmployeeID = sal.EmployeeID
--GROUP BY Gender


/*
CTE's
*/

--USE SQL

--WITH CTE_Employee as
--( SELECT Firstname, Lastname, Gender, Salary,
--COUNT(Gender) OVER (PARTITION by Gender) as TotalGender
--, AVG(Salary) OVER (PARTITION BY Gender) as AvgSalary
--FROM EmployeeDemographics emp
--JOIN EmployeeSalary sal
--	ON emp.EmployeeID = sal.EmployeeID 
--Where Salary > '45000' )

/*
Temp Tables
*/

--Create Table #temp_emp(
--EmployeeID int,
--JobTitle varchar(100),
--Salary int)

--Insert INTO #temp_emp 
--Select * from Employeesalary

--Select * from #temp_emp




--DROP TABLE IF EXISTS #Temp_Employee2
--CREATE TABLE #Temp_Employee2 (
--JobTitle varchar(50),
--EmployeesPerJob int,

--AvgAge int,

--AvgSalary int)

--INSERT INTO #Temp_Employee2
--SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
--FROM EmployeeDemographics emp
--JOIN EmployeeSalary sal
--ON emp.EmployeeID = sal.EmployeeID
--group by JobTitle

--Select *
--FROM #Temp_Employee2


/*

Today's Topic: String Functions - TRIM, LTRIM, RTRIM, Replace, Substring, Upper, Lower

*/

--Drop Table EmployeeErrors;


--CREATE TABLE EmployeeErrors (
--EmployeeID varchar(50)
--,FirstName varchar(50)
--,LastName varchar(50)
--)

--Insert into EmployeeErrors Values 
--('1001  ', 'Jimbo', 'Halbert')
--,('  1002', 'Pamela', 'Beasely')
--,('1005', 'TOby', 'Flenderson - Fired')

--Select *
--From EmployeeErrors

---- Using Trim, LTRIM, RTRIM

--Select EmployeeID, TRIM(employeeID) AS IDTRIM
--FROM EmployeeErrors 

--Select EmployeeID, RTRIM(employeeID) as IDRTRIM
--FROM EmployeeErrors 

--Select EmployeeID, LTRIM(employeeID) as IDLTRIM
--FROM EmployeeErrors 

---- Using Replace

--Select LastName, REPLACE(LastName, '- Fired', '') as LastNameFixed
--FROM EmployeeErrors

---- Using Substring

--Select Substring(err.FirstName,1,3), Substring(dem.FirstName,1,3), Substring(err.LastName,1,3), Substring(dem.LastName,1,3)
--FROM EmployeeErrors err
--JOIN EmployeeDemographics dem
--	on Substring(err.FirstName,1,3) = Substring(dem.FirstName,1,3)
--	and Substring(err.LastName,1,3) = Substring(dem.LastName,1,3)



---- Using UPPER and lower

--Select firstname, LOWER(firstname)
--from EmployeeErrors

--Select Firstname, UPPER(FirstName)
--from EmployeeErrors



/*
Today's Topic: Stored Procedures
*/

USE SQL

CREATE PROCEDURE Temp_Employee
AS
DROP TABLE IF EXISTS #temp_employee
Create table #temp_employee (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM EmployeeDemographics emp
JOIN EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle

Select * 
From #temp_employee


EXEC Temp_Employee


CREATE PROCEDURE Temp_Employee2 
@JobTitle nvarchar(100)
AS
DROP TABLE IF EXISTS #temp_employee3
Create table #temp_employee3 (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee3
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM EmployeeDemographics emp
JOIN EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
where JobTitle = @JobTitle --- make sure to change this in this script from original above
group by JobTitle

Select * 
From #temp_employee3
GO;


exec Temp_Employee2 @jobtitle = 'Salesman'
exec Temp_Employee2 @jobtitle = 'Accountant'



/*
Today's Topic: Subqueries (in the Select, From, and Where Statement)
*/

Select EmployeeID, JobTitle, Salary
From EmployeeSalary

-- Subquery in Select

Select EmployeeID, Salary, (Select AVG(Salary) From EmployeeSalary) as AllAvgSalary
From EmployeeSalary

-- How to do it with Partition By
Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
From EmployeeSalary

-- Why Group By doesn't work
Select EmployeeID, Salary, AVG(Salary) as AllAvgSalary
From EmployeeSalary
Group By EmployeeID, Salary
order by EmployeeID


-- Subquery in From

Select a.EmployeeID, AllAvgSalary
From 
	(Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
	 From EmployeeSalary) a
Order by a.EmployeeID


-- Subquery in Where


Select EmployeeID, JobTitle, Salary
From EmployeeSalary
where EmployeeID in (
	Select EmployeeID 
	From EmployeeDemographics
	where Age > 30)
